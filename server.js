const WebSocket = require('ws');

const PORT = process.env.PORT || 3000;
const server = new WebSocket.Server({ port: PORT });

console.log(`‚úÖ WebSocket server is running on port ${PORT}`);

const clients = new Map(); // username ‚Üí socket

server.on('connection', (socket) => {
  console.log('üîå New client connected');

  socket.on('message', (data) => {
    let payload;
    try {
      payload = JSON.parse(data);
    } catch (e) {
      socket.send('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
      return;
    }

    const { from, to, message } = payload;

    if (!from || !to || !message) {
      socket.send('‚ùå –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    clients.set(from, socket);

    const recipientSocket = clients.get(to);
    if (recipientSocket && recipientSocket.readyState === WebSocket.OPEN) {
      recipientSocket.send(`${from} ‚Üí –≤—ã: ${message}`);
    } else {
      socket.send(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${to}" –Ω–µ –≤ —Å–µ—Ç–∏`);
    }
  });

  socket.on('close', () => {
    console.log('‚ùå Client disconnected');
    // –£–¥–∞–ª–∏–º –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ socket —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    for (const [name, sock] of clients.entries()) {
      if (sock === socket) {
        clients.delete(name);
        break;
      }
    }
  });
});
